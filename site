#!/usr/bin/env python

import codecs
import os

from argh import *
from datetime import datetime
from flask import Flask, render_template, abort
from flask_frozen import Freezer
from flaskext.flatpages import FlatPages
from flaskext.markdown import Markdown
from flaskext.assets import Environment

# Configuration
DEBUG = True
BASE_URL = 'http://nicolas.perriault.net'
ASSETS_DEBUG = DEBUG
FLATPAGES_AUTO_RELOAD = DEBUG
FLATPAGES_EXTENSION = '.md'
FLATPAGES_ROOT = 'pages'
FREEZER_BASE_URL = 'http://localhost/nperriault/build/'
GA_TRACKER = 'XXX'

app = Flask(__name__)
app.config.from_object(__name__)
pages = FlatPages(app)
freezer = Freezer(app)
Markdown(app)
Environment(app)


@app.context_processor
def inject_ga():
    return dict(BASE_URL=BASE_URL, GA_TRACKER=GA_TRACKER)


def get_pages(pages, min=None, max=None, section=None):
    articles = [p for p in pages]
    if not DEBUG:
        articles = [p for p in articles if p.meta.get('published') is True]
    articles = sorted(articles, reverse=True, key=lambda p: p.meta.get('date'))
    if section:
        articles = [p for p in articles if p.path.startswith(section)]
    if min and max:
        return articles[min:max]
    elif max:
        return articles[:max]
    elif min:
        return articles[min:]
    else:
        return articles


@app.route('/')
def index():
    return render_template('index.html',
        code_posts=get_pages(pages, max=5, section="code"),
        photos=get_pages(pages, max=5, section="photography"),
        posts=get_pages(pages, max=5, section="carnet"))


@app.route('/<string:section>/')
def section(section):
    template = '%s/index.html' % section
    return render_template(template, pages=get_pages(pages, max=10,
        section=section))


@app.route('/<string:section>/archives/')
def section_archives(section):
    """ TODO: group by year """
    template = '%s/index.html' % section
    return render_template(template, pages=get_pages(pages, max=None,
        section=section))


@app.route('/<path:path>/')
def page(path):
    section = path.split('/')[0]
    page = pages.get_or_404(path)
    # allow preview of unpublished stuff in DEBUG mode
    if not DEBUG and not page.meta.get('published', False):
        abort(404)
    template = page.meta.get('template', '%s/page.html' % section)
    return render_template(template, page=page)


@app.route('/contact/')
def contact():
    return render_template('contact.html')


@app.route('/feed/')
def feed():
    return render_template('feed.rss', pages=get_pages(pages, max=25))


@app.errorhandler(404)
def page_not_found(error):
    return render_template('404.html'), 404


@command
def serve():
    """ Serves this site.
    """
    app.run()


@command
def build():
    """ Builds this site.
    """
    print("Building website...")
    freezer.freeze()
    print("Done. Eventually find it at %s" % FREEZER_BASE_URL)


@command
def post(section, title=None, filename=None):
    """ Create a new empty post.
    """
    if not os.path.exists(os.path.join(FLATPAGES_ROOT, section)):
        raise CommandError(u"Section '%s' does not exist" % section)
    date = datetime.today()
    title = unicode(title) if title else "Untitled Post"
    filename = filename if filename else "untitled-post.md"
    year = date.year
    pathargs = [section, str(year), filename, ]
    filepath = os.path.join(os.path.abspath(os.path.dirname(__file__)),
        FLATPAGES_ROOT, '/'.join(pathargs))
    if os.path.exists(filepath):
        raise CommandError("File %s exists" % filepath)
    content = '\n'.join([
        u"title: %s" % title,
        u"date: %s" % date.strftime("%Y-%m-%d"),
        u"published: false\n\n",
    ])
    try:
        codecs.open(filepath, 'w', encoding='utf8').write(content)
        print(u'Created %s' % filepath)
    except Exception, error:
        raise CommandError(error)


if __name__ == '__main__':
    parser = ArghParser()
    parser.add_commands([serve, build, post])
    parser.dispatch()
