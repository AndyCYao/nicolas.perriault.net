#!/usr/bin/env python

import codecs
import locale
import os

from argh import *
from datetime import datetime
from fabric.api import local
from flask import Flask, render_template, abort
from flask_frozen import Freezer
from flaskext.flatpages import FlatPages
from flaskext.markdown import Markdown
from flaskext.assets import Environment

# Configuration
DEBUG = True
BASE_URL = 'http://nicolas.perriault.net'
#ASSETS_DEBUG = DEBUG
FLATPAGES_AUTO_RELOAD = DEBUG
FLATPAGES_EXTENSION = '.md'
FLATPAGES_ROOT = 'pages'

# App configuration
FEED_MAX_LINKS = 25
SECTION_MAX_LINKS = 5

app = Flask(__name__)
app.config.from_object(__name__)
pages = FlatPages(app)
freezer = Freezer(app)
Markdown(app)
Environment(app)


###############################################################################
# Model helpers

def get_pages(pages, offset=None, limit=None, section=None, year=None):
    """ Retrieves pages matching passec criterias.
    """
    articles = list(pages)
    if not DEBUG:
        articles = [p for p in articles if p.meta.get('published') is True]
    if section:
        articles = [p for p in articles if p.path.startswith(section)]
    if year:
        articles = [p for p in articles if p.meta.get('date').year == year]
    articles = sorted(articles, reverse=True, key=lambda p: p.meta.get('date'))
    if offset and limit:
        return articles[offset:limit]
    elif limit:
        return articles[:limit]
    elif offset:
        return articles[offset:]
    else:
        return articles


def get_years(pages):
    return list(set([page.meta.get('date').year for page in pages]))


###############################################################################
# Filters

@app.template_filter()
def to_rfc2822(dt):
    if not dt:
        return
    current_locale = locale.getlocale(locale.LC_TIME)
    locale.setlocale(locale.LC_TIME, "en_US")
    formatted = dt.strftime("%a, %d %b %Y %H:%M:%S +0000")
    locale.setlocale(locale.LC_TIME, current_locale)
    return formatted


###############################################################################
# Context processors

@app.context_processor
def inject_ga():
    return dict(BASE_URL=BASE_URL)


###############################################################################
# Routes

@app.route('/contact/')
def contact():
    return render_template('contact.html')


@app.route('/feed/')
def feed():
    return render_template('feed.rss', pages=get_pages(pages,
        limit=FEED_MAX_LINKS),
        build_date=datetime.now())


@app.route('/<string:section>/feed/')
def feed_section(section):
    articles = get_pages(pages, limit=FEED_MAX_LINKS, section=section)
    return render_template('%s/feed.rss' % section, pages=articles,
        build_date=datetime.now())


@app.route('/')
def index():
    return render_template('index.html',
        code_posts=get_pages(pages, limit=5, section="code"),
        photos=get_pages(pages, limit=5, section="photography"),
        posts=get_pages(pages, limit=5, section="carnet"))


@app.route('/<path:path>/')
def page(path):
    section = path.split('/')[0]
    page = pages.get_or_404(path)
    # allow preview of unpublished stuff in DEBUG mode
    if not DEBUG and not page.meta.get('published', False):
        abort(404)
    template = page.meta.get('template', '%s/page.html' % section)
    return render_template(template, page=page)


@app.route('/<string:section>/')
def section(section):
    template = '%s/index.html' % section
    articles = get_pages(pages, limit=SECTION_MAX_LINKS, section=section)
    years = get_years(articles)
    return render_template(template, pages=articles, years=years)


@app.route('/<string:section>/<int:year>/')
def section_archives_year(section, year):
    template = '%s/archives.html' % section
    return render_template(template, pages=get_pages(pages, section=section,
        year=year), year=year)


@app.route('/404.html')
def error404():
    return render_template('404.html')


@app.route('/500.html')
def error500():
    return render_template('500.html')


@app.errorhandler(404)
def page_not_found(error):
    return render_template('404.html'), 404


###############################################################################
# Commands

@command
def build():
    """ Builds this site.
    """
    print("Building website...")
    app.debug = False
    freezer.freeze()
    print("Done.")


@command
def deploy():
    build()
    local("rsync -avz -e ssh ./build/ akeiaws:/var/www/nperriault")


@command
def post(section, title=None, filename=None):
    """ Create a new empty post.
    """
    if not os.path.exists(os.path.join(FLATPAGES_ROOT, section)):
        raise CommandError(u"Section '%s' does not exist" % section)
    date = datetime.today()
    title = unicode(title) if title else "Untitled Post"
    filename = filename if filename else "untitled-post.md"
    year = date.year
    pathargs = [section, str(year), filename, ]
    filepath = os.path.join(os.path.abspath(os.path.dirname(__file__)),
        FLATPAGES_ROOT, '/'.join(pathargs))
    if os.path.exists(filepath):
        raise CommandError("File %s exists" % filepath)
    content = '\n'.join([
        u"title: %s" % title,
        u"date: %s" % date.strftime("%Y-%m-%d"),
        u"published: false\n\n",
    ])
    try:
        codecs.open(filepath, 'w', encoding='utf8').write(content)
        print(u'Created %s' % filepath)
    except Exception, error:
        raise CommandError(error)


@command
def serve(server='127.0.0.1', port=5000, debug=DEBUG):
    """ Serves this site.
    """
    if isinstance(debug, str):
        debug = True if debug.lower() == "true" else False
    app.run(host=server, port=port, debug=debug)


if __name__ == '__main__':
    parser = ArghParser()
    parser.add_commands([build, deploy, post, serve, ])
    parser.dispatch()
